### Enable-O365Feature ###
<#
.SYNOPSIS
    Enables a given office 365 feature
 
.DESCRIPTION
    Loads the license map created by Get-LicencedFeatures in to the script namespace

.OUTPUTS
    $script:O365LicenseMap is available
 
.NOTES
    uses the JSON file generated by the Get-O365Licenses script

.PARAMETER Tenant
    Mandatory. Name of the O365 tenant

.PARAMETER License
    Mandatory. Name of the O365 license

.PARAMETER Feature
    Mandatory. Name of the O365 feature

.PARAMETER UPN
    Mandatory. UPN for the user
    
.EXAMPLE
    Enable-O365Feature -Tenant "MYTENANT1" -License "EMS" -Feature "INTUNE_A" -UPN "User.Name@domain.com"

#>
 Function Enable-O365Feature { 
 [CmdletBinding()]
    Param (

        [Parameter(Mandatory=$true,ValueFromPipeline=$true)][string]$Tenant,
        [Parameter(Mandatory=$true,ValueFromPipeline=$true)][string]$License,
        [Parameter(Mandatory=$true,ValueFromPipeline=$true)][string]$Feature,
        [Parameter(Mandatory=$true,ValueFromPipeline=$true)][string]$UPN

    )

    Begin{

         $ProductCode = $Tenant + ":" + $License

         Log-write -logpath $Script:LogPath -linevalue "`t`t`tEnabling $Feature for $UPN"
         
         #Create an array of the ServicePlans currently disabled that are not "$ProductCode". 
         #The SetMSOUserLicense function does not contain an enable argument, only disable so this is backwards
         $DisabledPlans = @()

    }
    
    Process {

        try{ 
           #Get the O365 user object associated with the UPN
           $msoluser = get-msolUser -UserPrincipalName $UPN

           #Does the user have an activated license for this?
           If ($msoluser.licenses.accountSKU.SkuPartNumber -contains $License){
                #User is alredy licensed for this SKU 
           }else{
	            #user doesnt have a license for this SKU
	            #Enable the SKU
	            Log-write -logpath $Script:LogPath -linevalue "`t`t`t`t$UPN isn't enabled with a license for $License, activating..."
	            Set-MsolUserLicense -UserPrincipalName $UPN -AddLicenses $ProductCode
	
	            #Disable all the features in it based on the JSON map generated
	            Log-write -logpath $Script:LogPath -linevalue "`t`t`t`tDisabling all features"
	            $BaseLicenseOptions = New-MsolLicenseOptions -AccountSkuId $ProductCode -DisabledPlans $O365LicenseMap.Licenses.$ProductCode.Features

	            Set-MsolUserLicense -UserPrincipalName $UPN -LicenseOptions $BaseLicenseOptions
                
                #Get the MMSLUser again
                $msoluser = get-msolUser -UserPrincipalName $UPN
           }

           
           #Get the object for the SKU requested
           $msolSku = $msoluser.Licenses | Where-Object {$_.AccountSKUID -eq $ProductCode}

           #Get the services which are currently disabled within the SKU
           $msolservices = $msolSku.ServiceStatus | Where-Object {$_.ServicePlan.Servicename -ne $Feature -and $_.ProvisioningStatus -eq "Disabled"}

           Log-write -logpath $Script:LogPath -linevalue "`t`t`tEnumerating existing licensed features"
           foreach ($msolservice in $msolservices){
               $DisabledPlans += $msolservice.ServicePlan.ServiceName
           }


           #Create a new object for the plans to enable
           $NewLicenseOptions = New-MsolLicenseOptions -AccountSkuId $ProductCode -DisabledPlans $DisabledPlans
           Log-write -logpath $Script:LogPath -linevalue "`t`t`tApplying new license settings"
           Set-MsolUserLicense -UserPrincipalName $UPN -LicenseOptions $NewLicenseOptions
           
                       
            #Check to see if it worked
            Log-write -logpath $Script:LogPath -linevalue "`t`tChecking new license settings"
            
            #Update the msolSKU object now the feature should have been enabled
            $msolSku = $msoluser.Licenses | Where-Object {$_.AccountSKUID -eq $ProductCode}
            
            #Check to see if the requested feature is still disabled
            if ($msolSku.ServiceStatus | Where-Object {$_.ServicePlan.Servicename -eq $Feature -and $_.ProvisioningStatus -eq "Disabled"}){
                
                #Feature is still disabled
                Log-Error -LogPath $Script:LogPath -ErrorDesc "[ERROR]$_.Exception" -ExitGracefully $False


            } else {
                #Feature is not disabled
                Log-write -logpath $Script:LogPath -linevalue "`t`t`t$Feature has been enabled"

            }

            Log-write -logpath $Script:LogPath -linevalue "`t`tFeature Licensed Successfully"
            
        }catch{

            Log-Error -LogPath $Script:LogPath -ErrorDesc $_.Exception -ExitGracefully $False
    
        }#Try/Catch
    
    }#end Process

}#Function
